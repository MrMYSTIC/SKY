#!/usr/bin/php
<?php
// skym new MyMigrationName

// skym migrate DEV
// skym migrate PRO 20140310150303

// skym rollback DEV
// skym rollback PRO 20140301000000

// skym show ran
// skym show list
// skym show failed

date_default_timezone_set('UTC');
require_once(getenv('SKYCORE').'/core/utils/SKY.class.php');
SKY::LoadCore();
SkyL::Import(SkyDefines::Call('SKYCLI_CLASS'));
SkyL::Import(SkyDefines::Call('SKYCORE_CORE_COMMANDS').'/SkyCommand.interface.php');

class MigrationLog
{
	private static $Instance = null;
	private static $HostName;

	private $LogName 	= '.migrations.log';
	private $LogLoc  	= 'DIR_LIB_MIGRATIONS';
	private $InitArray 	= array(
		'migrated' => array(),
		'rolled'   => array()
	);

	// ## STATIC
	public static function GetInstance()
	{
		if(is_null(self::$Instance))
			self::$Instance = new MigrationLog();
		return self::$Instance;
	}

	public static function GetUnmigrated()
	{
		$ML = self::GetInstance();
		$migrations = SkyM::GetListOfMigrations();
		$migrated = $ML->Read('migrated');

		return array_values(array_diff($migrations, $migrated));
	}

	public static function GetMigrated()
	{
		$ML = self::GetInstance();
		$migrations = SkyM::GetListOfMigrations();
		return $ML->Read('migrated');
	}

	public static function GetRolled()
	{
		$ML = self::GetInstance();
		$migrations = SkyM::GetListOfMigrations();
		return $ML->Read('rolled');
	}

	public static function MarkAsMigrated($migration)
	{
		self::Mark('migrated', 'rolled', $migration);
	}

	public static function MarkAsRolled($migration)
	{
		self::Mark('rolled', 'migrated', $migration);
	}

	private static function Mark($as, $remove, $migration)
	{
		$ML = self::GetInstance();
		$ML->AddTo($as, $migration);
		$ML->RemoveFrom($remove, $migration);
	}

	// ## PUBLIC
	public function __construct()
	{
		self::$HostName = php_uname('n');
		$file = $this->GetMigrationFile();
		if(!is_file($file)) // If migration log does not exists
			$this->InitLogFile($file);

		$log = unserialize(file_get_contents($this->GetMigrationFile()));
		if(!array_key_exists(self::$HostName, $log))
		{
			$log[self::$HostName] = array(
				'DEV'  => $this->InitArray,
				'TEST' => $this->InitArray,
				'PRO'  => $this->InitArray
			);
			file_put_contents($this->GetMigrationFile(), serialize($log));
		}
	}

	public function GetMigrationFile()
	{
		return SkyDefines::Call($this->LogLoc).'/'.$this->LogName;
	}

	public function AddTo($to, $migration)
	{
		$log = unserialize(file_get_contents($this->GetMigrationFile()));
		$log[self::$HostName][SkyDefines::GetEnv()][$to][] = $migration;
		file_put_contents($this->GetMigrationFile(), serialize($log));
	}

	public function RemoveFrom($from, $migration)
	{
		$log = unserialize(file_get_contents($this->GetMigrationFile()));
		if(($key = array_search($migration, $log[self::$HostName][SkyDefines::GetEnv()][$from])) !== false)
			unset($log[self::$HostName][SkyDefines::GetEnv()][$from][$key]);
		else
			return false;
		return (bool) file_put_contents($this->GetMigrationFile(), serialize($log));
	}

	public function Read($type = 'migrated')
	{
		$log = unserialize(file_get_contents($this->GetMigrationFile()));
		return $log[self::$HostName][SkyDefines::GetEnv()][$type];
	}

	// ## PRIVATE
	private function InitLogFile($file)
	{
		$f = fopen($file, 'w');
		fwrite($f, serialize(array(
			self::$HostName => array(
				'DEV'  => $this->InitArray,
				'TEST' => $this->InitArray,
				'PRO'  => $this->InitArray
			)
		)));
		fclose($f);
	}
}

class SkyM extends SkyCLI
{
	public static function GetMySQLConnection($env)
	{
		SkyDefines::SetEnv($env);
		$db = AppConfig::GetDatabaseSettings();
		$c = new mysqli($db[':server'], $db[':username'], $db[':password'], $db[':database']);
		if($c->connect_error)
		    throw new Exception('Connection Error: ('.$c->connect_errno.') '.$c->connect_error);
		return $c;
	}

	public static function SortMigrations($a, $b)
	{
		$a_tmp = str_replace('.migration.php', '', $a);
		$a_tmp = explode('_', $a_tmp);
		$a_date = strtotime($a_tmp[1]);

		$b_tmp = str_replace('.migration.php', '', $b);
		$b_tmp = explode('_', $b_tmp);
		$b_date = strtotime($b_tmp[1]);

		if($a_date == $b_date)
			return 0;
		return ($a_date > $b_date) ? +1 : -1;
	}

	public static function GetListOfMigrations()
	{
		$migrations = array();
		if($handle = opendir(SkyDefines::Call('DIR_LIB_MIGRATIONS')))
		{
		    while(false !== ($entry = readdir($handle))) 
		    {
		        if($entry != '.' && $entry != '..' && $entry != '.migrations.log')
		        	$migrations[] = $entry;
		    }

		    closedir($handle);
		}
		usort($migrations, array(get_class(), 'SortMigrations'));
		return $migrations;
	}
}

$skym = new SkyM($argv);
?>