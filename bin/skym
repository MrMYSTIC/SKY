#!/usr/bin/php
<?php
// skym new MyMigrationName

// skym migrate DEV
// skym migrate PRO 20140310150303

// skym rollback DEV
// skym rollback PRO 20140301000000
// skym rollback PRO ALL

// skym show ran
// skym show list
// skym show failed

date_default_timezone_set('UTC');
require_once(getenv('SKYCORE').'/core/utils/SKY.class.php');
SKY::LoadCore();
SkyL::Import(SkyDefines::Call('SKYCLI_CLASS'));
SkyL::Import(SkyDefines::Call('SKYCORE_CORE_COMMANDS').'/SkyCommand.interface.php');

class SkyM extends SkyCLI
{
	private function MigrationLog()
	{
		return SkyDefines::Call('DIR_LIB_MIGRATIONS').'/.migrations.log';
	}

	private function InitialMigrationLog()
	{
		return array(
			'ran' => array(),
			'failed' => array(),
			'rolled' => array()
		);
	}

	private function CreateMigrationLog()
	{
		$log = $this->MigrationLog();
		if(is_file($log))
			return true;
		$f = fopen($log, 'w');
		fwrite($f, serialize($this->InitialMigrationLog()));
		return fclose($f);
	}

	public function ReadFromMigrationLog()
	{
		$log = $this->MigrationLog();
		$this->CreateMigrationLog();
		return unserialize(file_get_contents($log));
	}

	public function WriteToMigrationLog($log = array())
	{
		if(empty($log))
			$log = $this->InitialMigrationLog();
		$logfile = $this->MigrationLog();
		$this->CreateMigrationLog();
		return file_put_contents($logfile, serialize($log));
	}

	public function GetMySQLConnection($env)
	{
		SkyDefines::SetEnv($env);
		$db = AppConfig::GetDatabaseSettings();
		$c = new mysqli($db[':server'], $db[':username'], $db[':password'], $db[':database']);
		if($c->connect_error)
		    throw new Exception('Connection Error: ('.$c->connect_errno.') '.$c->connect_error);
		return $c;
	}

	public static function SortMigrations($a, $b)
	{
		$a_tmp = str_replace('.migration.php', '', $a);
		$a_tmp = explode('_', $a_tmp);
		$a_date = strtotime($a_tmp[1]);

		$b_tmp = str_replace('.migration.php', '', $b);
		$b_tmp = explode('_', $b_tmp);
		$b_date = strtotime($b_tmp[1]);

		if($a_date == $b_date)
			return 0;
		return ($a_date > $b_date) ? +1 : -1;
	}

	public function GetListOfMigrations()
	{
		$migrations = array();
		if($handle = opendir(SkyDefines::Call('DIR_LIB_MIGRATIONS')))
		{
		    while(false !== ($entry = readdir($handle))) 
		    {
		        if($entry != '.' && $entry != '..' && $entry != '.migrations.log')
		        	$migrations[] = $entry;
		    }

		    closedir($handle);
		}
		usort($migrations, array(get_class(), 'SortMigrations'));
		return $migrations;
	}
}

$skym = new SkyM($argv);
?>